<?php
/* $Id$ */

/**
 * A generalized voting API for Drupal. See README.txt for details.
 */

/**
 * Implementation of hook_help().
 */
function votingapi_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t("Provides a shared voting API for other modules.");
    case 'admin/settings/voting':
      return t("Provides a shared API for other modules to store and display community votes and ratings.");
  }
}

/**
 * Add a new vote for the current user. If they've already voted, this casts an additional vote.
 */
function votingapi_add_vote($content_type, $content_id, $tag, $vote, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }

  $vobj->voting_id = db_next_id('votes');
  $vobj->content_type = $content_type;
  $vobj->content_id = $content_id;
  $vobj->vote = $vote;
  $vobj->tag = $tag;
  $vobj->uid = $uid;
  $vobj->timestamp = time();
  $vobj->hostname = $_SERVER['REMOTE_ADDR'];

  // Give other modules a chance to alter the vote object before it's inserted,
  // or update their own auxiliary tables with additional information.
  votingapi_invoke_votingapi($vobj, 'insert');

  db_query("INSERT INTO {votes} (voting_id, content_type, content_id, vote, tag, uid, timestamp, hostname) VALUES (%d, '%s', %d, %d, '%s', %d, %d, '%s')", 
    $vobj->voting_id, $vobj->content_type, $vobj->content_id, $vobj->vote, $vobj->tag, $vobj->uid, $vobj->timestamp, $vobj->hostname);
  return $vobj;
}


/**
 * Sets the vote for the current user. If they've already voted, this changes it.
 * In most cases, this function should be used by external modules.
 */
function votingapi_set_vote($content_type, $content_id, $tag, $vote, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }

  $result = db_query("SELECT * FROM {votes} WHERE content_type='%s' AND content_id=%d AND tag = '%s' AND uid=%d", $content_type, $content_id, $tag, $uid);
  while ($vobj = db_fetch_object($result)) {
    $vobj = votingapi_change_vote($vobj, $vote);
    $exists = TRUE;
  }
  if (!$exists) {
    $vobj = votingapi_add_vote($content_type, $content_id, $tag, $vote, $uid);
  }
  return $vobj;
}

/**
 * Alters a user's existing vote, if one exists.
 */
function votingapi_change_vote($vobj, $vote) {
  // Give other modules a chance to respond to the update.
  // Both the existing vote object and the new vote value are handed off to interested
  // modules.
  votingapi_invoke_votingapi($vobj, 'update', $vote);
  db_query("UPDATE {votes} SET vote = %d WHERE voting_id = %d", $vote, $vobj->voting_id);
  return $vobj;
}

/**
 * Deletes an existing vote.
 */
function votingapi_delete_vote($vobj) {
  // Give other modules a chance to respond to the delete.
  votingapi_invoke_votingapi($vobj, 'delete', $vote);  
  db_query("DELETE FROM {votes} WHERE voting_id = %d", $voting_id);
}

/**
 * Get a specific user's votes for a piece of content.
 */
function votingapi_get_votes($content_type, $content_id, $tag_list = NULL, $uid_list = NULL) {
  $votes->tags = array();
  $votes->raw_votes = array();

  if ($tag_list) {
    $filter_string .= " AND v.tag IN ('" . implode("','",$tag_list) . "')";
  }
  if ($uid_list) {
    $filter_string .= " AND v.uid IN (" . implode(',',$uid_list) . ')';
  }

  $result = db_query("SELECT * FROM {votes} v WHERE content_type='%s' AND content_id='%s' $filter_string", $content_type, $content_id);
  while ($vobj = db_fetch_object($result)) {
    // Give other modules a chance to alter the vote object, add additional data, etc..
    votingapi_invoke_votingapi($vobj, 'load');
    $votes->tags[$vote_data->tag][$vobj->voting_id] = $vobj;
    $votes->raw_votes[$vobj->voting_id] = $vobj;
  }

  // Give other modules a chance to do custom totaling/summing/etc of the votes.
  votingapi_invoke_votingapi($votes, 'calculate');
  return $votes;
}

function votingapi_get_vote($voting_id) {  
  $result = db_query('SELECT * FROM {votes} v WHERE voting_id=%d', $voting_id);
  $vobj = db_fetch_object($result);
  
  // Give other modules a chance to alter the vote object, add additional data, etc..
  votingapi_invoke_votingapi($vobj, 'load');
  return $vobj;
}



/**
 * Invoke a hook_votingapi() operation in all modules.
 *
 * @param &$vote
 *   A vote object.
 * @param $op
 *   A string containing the name of the votingapi operation.
 *   Currently, insert/update/delete, load, and calculate are supported.
 * @param $a3
 *   An additional argument to pass on to the hook, after the $vote and $op arguments.
 * @return
 *   The returned value of the invoked hooks.
 */
function votingapi_invoke_votingapi(&$vote, $op, $a3 = NULL) {
  $return = array();
  foreach (module_implements('votingapi') as $name) {
    $function = $name .'_votingapi';
    $result = $function($vote, $op, $a3);
    if (is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}