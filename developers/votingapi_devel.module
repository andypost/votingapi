<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function votingapi_devel_menu() {
  $items = array();
  if (module_exists('taxonomy')) {
    $items['admin/generate/votingapi'] = array(
      'title' => 'Generate votes',
      'description' => 'Generate a given number of votes on site content. Optionally delete existing votes.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('votingapi_devel_generate_votes_form'),
      'access arguments' => array('administer nodes'),
    );
  }

  return $items;
}

function votingapi_devel_generate_votes_form() {
  $types = node_get_types();
  foreach ($types as $type) {
    $options[$type->type] = t($type->name);
  }

  $form['node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Which node types should receive votes?'),
    '#options' => $options,
    '#default_value' => array_keys($options),
  );

  $form['vote_type'] = array(
    '#type' => 'select',
    '#title' => t('What type of votes should be generated?'),
    '#options' => array(
      'five' => t('Fivestar style'),
      'flag' => t('Digg style'),
      'updown' => t('Reddit style'),
    ),
    '#default_value' => 'percent',
  );

  $form['kill_votes'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete existing votes before generating new ones.'),
    '#default_value' => FALSE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Do it!'),
  );
  return $form;
}

function votingapi_devel_generate_votes_form_submit($form_id, &$form_state) {
  votingapi_devel_generate_votes($form_state['values']['node_types'], $form_state['values']['vote_type'], $form_state['values']['kill_votes']);
}


function votingapi_devel_generate_votes($node_types, $vote_type, $kill_votes = FALSE) {
  module_load_include('inc', 'devel_generate');

  if ($kill_votes) {
    db_query("TRUNCATE TABLE {votingapi_vote}");
    db_query("TRUNCATE TABLE {votingapi_cache}");
  }

  $uids = devel_get_users();
  $nids = array();
  
  $sql  = "SELECT n.nid, n.created FROM {node} n ";
  $sql .= "WHERE n.type IN (". join(', ', array_fill(1, count($node_types), "'%s'")) . ") ";
  $sql .= "ORDER BY n.created DESC";
  
  $results = db_query($sql, $node_types);
  while ($node = db_fetch_array($results)) {
    $nids[$node['nid']] = $node['created'];
  }
  
  foreach ($nids as $nid => $timestamp) {
    _votingapi_devel_cast_votes($nid, $timestamp, $uids, $vote_type);
  }
}


function _votingapi_devel_cast_votes($nid, $timestamp, $uids, $style) {
  $votes = array();
  foreach ($uids as $uid) {
    switch ($style) {
      case 'five':
        if (rand(0, 2)) {
          $votes[] = array(
            'uid' => $uid,
            'content_id' => $nid,
            'value_type' => 'percent',
            'timestamp' => now() - rand(0, now() - $timestamp),
            'value' => rand(0, 5) * 20,
          );
        }
        break;
      case 'flag':
        if (rand(0, 1)) {
          $votes[] = array(
            'uid' => $uid,
            'content_id' => $nid,
            'value_type' => 'points',
            'timestamp' => now() - rand(0, now() - $timestamp),
            'value' => 1,
          );
        }
        break;
      case 'updown':
        if (rand(0, 3)) {
          $votes[] = array(
            'uid' => $uid,
            'content_id' => $nid,
            'value_type' => 'points',
            'timestamp' => now() - rand(0, now() - $timestamp),
            'value' => rand(0, 1) ? 1 : -1,
          );
        }
        break;
    }
  }
  votingapi_set_votes($votes, array());
}
